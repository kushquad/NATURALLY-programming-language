I am using 2 variables a and b.
Let a be 5, b be 2.

For 5 times, 
	decrement a by 1. 
	Add a to b. 
	print a and b.

If a is equal to 0, 
	print "Hello World". 
	Set b to be 10. 
	print b.
Else 
	print a.
	

Let a be an array of size 5.
Read elements into a.
Find the sum of a's elements.

Let sum be 0.
Iterate through a with i,
	If i is 0,
		Set the first element to 10.
	Add the ith element to sum.
Print the value of sum

/*-----------------------------------------------------------------------------------

Compile with 
"natural <file>.nat"

Statements end with '.'
Loops, conditional, function, structure block initial line starts with ','	
	Lines under them start with tabs.

Not case-sensitive
<var> = [a-z][0-9 a-z _]*

Data types
----------

// Built on Python data types, each a class
int
float
char
string
list
dictionary
set
boolean

// Complex data types
queue
priority_queue
stack


Output
------

print <var>.
print value of <var>.
print elements of <var>.			[Only if var is a complex data structure]

Input
-----

//This directly writes into the variable or data type
Read into a.
Take input into a.
Read <integer> elements into a.
Read into <integer>th element of a.

//These return a value or list
Get a.
Get <integer> elements.
Get <integer>th element of a.

Class and Operator Operations
-----------------------------

<variable manipulation> =
<firstterm> <function> <secondterm> a. |   					a.function()
<firstterm> <function> <secondterm> a's elements. | 		a.function()	//Only valid for complex data structures.
<firstterm> <function> <secondterm> <argument list> |
Value of <variable>'s <attribute>						 	a.attribute

<firstterm> = Find | 
<secondterm> = of | 

<argument list> = <argument> | <argument> <last arg> | <argument>, <argument list>
<last arg> = and <argument>
<argument> = <variable> | <primitive>

Definition and Declarations
--------------------------

<variabledeclaration> = Let <variable> be <type> | Let <variable> be <type> value <object> |
						Set <variable> to <object> | Define <variable> value <object>

<classdeclaration> = 
Define class <classname>, | Declare class <classname>,
	with variable(s),
		<variable> type <type> value <object>
	with function(s),
		<functioname> declared as
			<functiondefinition>

<functiondeclaration> = 
Define function <functioname>,	| Define function <functioname>,
	<functiondefinition>
	
<functiondefinition> = <body><functiondefinition> | <returnstatement><functiondefinition> | e

<returnstatement> = (return <variable> | e)
<body> = <variabledeclaration><body> | <variablemanipulation><body> | 
		  functiondeclaration><body> | <classdeclaration><body> | e

<fordeclaration> = for <integer> times, iterate through <complexdatastructure> with i
-----------------------------------------------------------------------------------*/

What we require to implement
Do Comments and blanklines
o If/elif/else, for, class and function blocks
Do Assignment, variables
Do Primitive data types
Do Strings, lists, dictionary
o Data type conversions (integer to octal, hex, bin, char; str, float, tuple, set)
o Operators (bitwise and/bitwise or/less_than,greater_than,less_than_equal,greater_than_equal,membership,identity, logical_and, logical_or, lexical, not_equal, in, not_in) (define operators on class, type)
o break, continue, pass statements
o File I/O
o Normal I/O
o Exception Handling
o Classes and objects
